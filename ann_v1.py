# -*- coding: utf-8 -*-
"""ann_V1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13mUtN23eYPp4QXTV73Lff9D0QDmKR2UY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import confusion_matrix, classification_report

# Load data
churn = pd.read_csv('/content/customer_churn_dataset-training-master.csv')

# Preprocess data
churn = churn.drop('CustomerID', axis=1)
churn.dropna(inplace=True)

churn['Gender'] = churn['Gender'].apply(lambda x: 1 if x == 'Male' else 0)
churn_cleaned = pd.get_dummies(data=churn, columns=['Subscription Type', 'Contract Length'])


# Define features (X) and target variable (y)
X = churn_cleaned.drop('Churn', axis=1)
y = churn_cleaned['Churn']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale data
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


''' # Creating the ANN model with one hidden layer

model = keras.Sequential([
    keras.layers.Dense(128, input_shape=(X_train.shape[1],), activation='relu'),  # Single hidden layer with 128 neurons
    keras.layers.Dense(1, activation='sigmoid')
])
'''
# Creating the ANN model with two hidden layers
model = keras.Sequential([
    keras.layers.Dense(128, input_shape=(X_train.shape[1],), activation='relu'),
    keras.layers.Dense(64, activation='relu'),  # Add a second hidden layer
    keras.layers.Dense(1, activation='sigmoid')
])


# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

'''# Train the model for 100 epochs
model.fit(X_train, y_train, epochs=100)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print("Model with One Hidden Layer (100 Epochs):")
print(f"Loss: {loss:.4f}, Accuracy: {accuracy:.4f}")

'''
# Train the model for 50 epochs
model.fit(X_train, y_train, epochs=50)

# Evaluate the model for 50 epochs
loss, accuracy = model.evaluate(X_test, y_test)
print("Model with Two Hidden Layers (50 Epochs):")
print(f"Loss: {loss:.4f}, Accuracy: {accuracy:.4f}")




# Make predictions
y_predict = model.predict(X_test)
y_pred_num = []
for element in y_predict:
    if element > 0.5:
        y_pred_num.append(1)
    else:
        y_pred_num.append(0)

# Print classification report and confusion matrix
print(classification_report(y_test, y_pred_num))
cm = tf.math.confusion_matrix(labels=y_test, predictions=y_pred_num)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.show()